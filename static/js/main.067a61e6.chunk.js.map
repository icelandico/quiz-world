{"version":3,"sources":["components/Header/header-styles.ts","components/Header/header.tsx","store/app-store.ts","components/Main/ButtonContainer/button-container-styles.ts","components/Main/ButtonContainer/button-container.tsx","components/Main/main-styles.ts","components/Main/ScoreView/score-view-styles.ts","components/Main/ScoreView/score-view.tsx","components/Main/Loader/loader.tsx","components/Main/TimeIndicator/time-indicator-styles.ts","components/Main/TimeIndicator/time-indicator.tsx","components/Main/QuestionsCards/QuestionView/question-view-styles.ts","components/Main/QuestionsCards/AnswerCard/answer-card-styles.ts","components/Main/QuestionsCards/AnswerCard/answer-card.tsx","components/Main/QuestionsCards/QuestionView/question-view.tsx","components/Main/main.tsx","components/App/app-styles.ts","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["MainHeader","styled","h2","_templateObject","HeaderDescription","p","_templateObject2","Header","react_default","a","createElement","PROXY_URL","QuizStore","Object","classCallCheck","this","userAnswers","countries","questions","loading","currentQuestion","userScore","quizStarted","timer","initialTime","createClass","key","value","answer","push","qId","correct","_this","fetch","concat","headers","Content-Type","Accept","then","res","json","data","catch","e","alert","countryList","length","randomIdx","Math","ceil","random","includes","_getPopulation","asyncToGenerator","regenerator_default","mark","_callee","country","response","wrap","_context","prev","next","sent","abrupt","total_population","population","t0","stop","_x","apply","arguments","_getCountriesPopulation","_callee3","results","populationResults","countriesAndPopulation","_this2","_context3","generateCountryList","_ref","_callee2","_context2","Promise","all","map","getPopulation","c","idx","toConsumableArray","Array","keys","q","state","_generateQuestionsSet","_callee5","questionsTypes","questionsSet","_this3","_context5","fetchCountries","generateQuestionsStructure","_ref2","_callee4","_context4","el","generateQuestionTypeOne","generateQuestionTypeTwo","_generateQuestionTypeOne","_callee6","index","countriesSet","answers","randomChoice","questionObj","_context6","getCountriesPopulation","element","id","type","_x2","_generateQuestionTypeTwo","_callee7","correctIndex","_context7","defineBiggestPopul","_x3","maxPopulation","sort","b","findIndex","decorate","action","observable","addUserAnswer","resetQuiz","timerChange","createContext","ButtonDiv","div","button_container_styles_templateObject","StartButton","button","button_container_styles_templateObject2","ButtonContainer","observer","store","useContext","onClick","preventDefault","changeLoadingState","generateQuestionsSet","startQuiz","MainContent","main_styles_templateObject","QuizContainer","main_styles_templateObject2","score_view_styles_templateObject","Answer","span","score_view_styles_templateObject2","WrongAnswer","_templateObject3","ScoreView","giveAnswers","checkCorrect","Loader","className","TimeContainer","time_indicator_styles_templateObject","TimeText","time_indicator_styles_templateObject2","TimeLeft","time_indicator_styles_templateObject3","TimeIndicator","useEffect","setInterval","clearInterval","QuestionContainer","question_view_styles_templateObject","QuestionTitle","h3","question_view_styles_templateObject2","AnswersContainer","question_view_styles_templateObject3","_templateObject4","AnswerButton","answer_card_styles_templateObject","props","longText","AnswerCard","questionId","Fragment","userAnswer","nextQuestion","checkAnswerLength","QuestionView","answer_card","Main","button_container","time_indicator","Loader_loader","question_view","renderQuestion","score_view","AppContainer","app_styles_templateObject","App","header","Main_main","Boolean","window","location","hostname","match","Root","mobx_react_module","quizStore","components_App_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.067a61e6.chunk.js","sourcesContent":["import styled from \"styled-components\"\r\n\r\nexport const MainHeader = styled.h2`\r\n  font-size: 2rem;\r\n  color: #000;\r\n  margin: 1rem auto;\r\n`\r\n\r\nexport const HeaderDescription = styled.p`\r\n  margin: 1rem auto;\r\n  width: 90%;\r\n  font-size: 0.75rem;\r\n  color: #000;\r\n\r\n  @media (min-width: 768px) {\r\n    width: 50%;\r\n    font-size: 1rem;\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport { MainHeader, HeaderDescription } from \"./header-styles\"\r\n\r\nconst Header: React.FC = () => {\r\n  return (\r\n    <header>\r\n      <MainHeader>World Population Quiz</MainHeader>\r\n      <HeaderDescription>\r\n        Your objective is to answer the questions! There are two kind of them.\r\n        For each correct answer you get 1 point. Hurry up because you have only\r\n        20 seconds to finish this task.\r\n      </HeaderDescription>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import { observable, action, decorate } from \"mobx\"\r\nimport { createContext } from \"react\"\r\n\r\nconst PROXY_URL = \"https://cors-anywhere.herokuapp.com/\"\r\nconst API_COUNTRIES = \"http://54.72.28.201:80/1.0/countries\"\r\nconst API_POPULATION = \"http://54.72.28.201:80/1.0/population/\"\r\n\r\ninterface IQuestion {\r\n  id: number\r\n  type: number\r\n  answers: number[] | string[]\r\n  correct: number\r\n  country: string\r\n}\r\n\r\ninterface ICountry {\r\n  c: string\r\n  population: number\r\n}\r\n\r\nexport class QuizStore {\r\n  userAnswers: number[] = []\r\n\r\n  countries: string[] = []\r\n\r\n  questions: IQuestion[] = []\r\n\r\n  loading: boolean = false\r\n\r\n  currentQuestion: number = 0\r\n\r\n  userScore: number = 0\r\n\r\n  quizStarted: boolean = false\r\n\r\n  timer: number = 20\r\n\r\n  initialTime: number = 20\r\n\r\n  resetQuiz() {\r\n    this.userAnswers = []\r\n    this.questions = []\r\n    this.currentQuestion = 0\r\n    this.userScore = 0\r\n    this.timer = this.initialTime\r\n    this.quizStarted = false\r\n  }\r\n\r\n  nextQuestion() {\r\n    this.currentQuestion += 1\r\n  }\r\n\r\n  addUserAnswer(answer: number) {\r\n    this.userAnswers.push(answer)\r\n  }\r\n\r\n  checkCorrect(qId: number, answer: number) {\r\n    if (this.questions[qId].correct === answer) {\r\n      this.userScore += 1\r\n    }\r\n  }\r\n\r\n  fetchCountries() {\r\n    fetch(`${PROXY_URL}${API_COUNTRIES}`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      }\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        this.countries = data.countries\r\n      })\r\n      .then(() => {\r\n        this.loading = false\r\n      })\r\n      .catch(e =>\r\n        alert(\r\n          `Something went wrong. Please try again or try to understand the error: ${e} .`\r\n        )\r\n      )\r\n  }\r\n\r\n  generateCountryList() {\r\n    const countryList: string[] = []\r\n    while (countryList.length < 3) {\r\n      const randomIdx = Math.ceil(Math.random() * this.countries.length - 1)\r\n      if (!countryList.includes(this.countries[randomIdx])) {\r\n        countryList.push(this.countries[randomIdx])\r\n      }\r\n    }\r\n    return countryList\r\n  }\r\n\r\n  async getPopulation(country: string) {\r\n    try {\r\n      const response = await fetch(\r\n        `${PROXY_URL}${API_POPULATION}${country}/2019-08-01/`,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\"\r\n          }\r\n        }\r\n      )\r\n      const json = await response.json()\r\n      return json.total_population.population\r\n    } catch (e) {\r\n      alert(\r\n        `Something went wrong. Please try again or try to understand the error: ${e} .`\r\n      )\r\n    }\r\n  }\r\n\r\n  async getCountriesPopulation() {\r\n    const countries = this.generateCountryList()\r\n    const results = async () => {\r\n      return Promise.all(countries.map(country => this.getPopulation(country)))\r\n    }\r\n    const populationResults = await results()\r\n    const countriesAndPopulation = countries.map((c, idx) => ({\r\n      c,\r\n      population: populationResults[idx] || 1000000\r\n    }))\r\n    return countriesAndPopulation\r\n  }\r\n\r\n  generateQuestionsStructure() {\r\n    const questions: number[] = [...Array(5).keys()]\r\n    const questionTypes = 2\r\n    const randomIdx = () => Math.ceil(Math.random() * questionTypes)\r\n    return questions.map(q => randomIdx())\r\n  }\r\n\r\n  changeLoadingState(state: boolean) {\r\n    this.loading = state\r\n  }\r\n\r\n  async generateQuestionsSet() {\r\n    this.fetchCountries()\r\n    const questionsTypes = this.generateQuestionsStructure()\r\n    const questionsSet = async () => {\r\n      return Promise.all(\r\n        questionsTypes.map((el, idx) =>\r\n          el === 1\r\n            ? this.generateQuestionTypeOne(idx)\r\n            : this.generateQuestionTypeTwo(idx)\r\n        )\r\n      )\r\n    }\r\n    const q: IQuestion[] = await questionsSet()\r\n    this.quizStarted = true\r\n    this.questions = q\r\n  }\r\n\r\n  async generateQuestionTypeOne(index: number) {\r\n    const countriesSet = await this.getCountriesPopulation()\r\n    const answers = countriesSet.map(element => element.population)\r\n    const randomChoice = Math.ceil(Math.random() * countriesSet.length - 1)\r\n    const questionObj = {\r\n      id: index,\r\n      type: 1,\r\n      answers,\r\n      correct: randomChoice,\r\n      country: countriesSet[randomChoice].c\r\n    }\r\n    return questionObj\r\n  }\r\n\r\n  async generateQuestionTypeTwo(index: number) {\r\n    const countriesSet = await this.getCountriesPopulation()\r\n    const answers = countriesSet.map(element => element.c)\r\n    const correctIndex = this.defineBiggestPopul(countriesSet)\r\n    const questionObj = {\r\n      id: index,\r\n      type: 2,\r\n      answers,\r\n      correct: correctIndex,\r\n      country: countriesSet[correctIndex].c\r\n    }\r\n    return questionObj\r\n  }\r\n\r\n  defineBiggestPopul(countries: ICountry[]) {\r\n    const sortByPopulation = [...countries].sort((a, b) =>\r\n      a.population < b.population ? 1 : -1\r\n    )\r\n    const maxPopulation = sortByPopulation[0].population\r\n    const index = countries.findIndex(\r\n      value => value.population === maxPopulation\r\n    )\r\n    return index\r\n  }\r\n\r\n  timerChange() {\r\n    this.timer -= 1\r\n  }\r\n}\r\n\r\ndecorate(QuizStore, {\r\n  fetchCountries: action,\r\n  loading: observable,\r\n  countries: observable,\r\n  questions: observable,\r\n  currentQuestion: observable,\r\n  generateQuestionsStructure: action,\r\n  addUserAnswer: action,\r\n  resetQuiz: action,\r\n  quizStarted: observable,\r\n  timer: observable,\r\n  timerChange: action\r\n})\r\n\r\nexport default createContext(new QuizStore())\r\n","import styled from \"styled-components\"\r\n\r\nexport const ButtonDiv = styled.div`\r\n  margin: 0 auto 1rem;\r\n`\r\n\r\nexport const StartButton = styled.button`\r\n  padding: 1rem;\r\n  background-color: #f79393;\r\n  font-size: 1rem;\r\n  color: #fff;\r\n  border: none;\r\n  transition: 0.2s all;\r\n\r\n  &:hover {\r\n    transform: scale(1.1);\r\n    cursor: pointer;\r\n  }\r\n`\r\n","import React, { useContext } from \"react\"\r\nimport { observer } from \"mobx-react-lite\"\r\nimport QuizStore from \"../../../store/app-store\"\r\nimport { ButtonDiv, StartButton } from \"./button-container-styles\"\r\n\r\nconst ButtonContainer: React.FC = observer(() => {\r\n  const store = useContext(QuizStore)\r\n  const { quizStarted } = store\r\n\r\n  const startQuiz = (e: React.SyntheticEvent<EventTarget>) => {\r\n    e.preventDefault()\r\n    store.resetQuiz()\r\n    store.changeLoadingState(true)\r\n    store.generateQuestionsSet()\r\n  }\r\n\r\n  const buttonText = () => {\r\n    return quizStarted ? \"Restart the Quiz\" : \"Start the Quiz\"\r\n  }\r\n\r\n  return (\r\n    <ButtonDiv>\r\n      <StartButton onClick={e => startQuiz(e)}>{buttonText()}</StartButton>\r\n    </ButtonDiv>\r\n  )\r\n})\r\n\r\nexport default ButtonContainer\r\n","import styled from \"styled-components\"\r\n\r\nexport const MainContent = styled.div`\r\n  text-align: center;\r\n`\r\n\r\nexport const QuizContainer = styled.div`\r\n  margin-top: 0;\r\n\r\n  @media (min-width: 768px) {\r\n    margin-top: 2rem;\r\n  }\r\n`\r\n","import styled from \"styled-components\"\r\n\r\nexport const ScoreContainer = styled.div`\r\n  margin-top: 2rem;\r\n`\r\n\r\nexport const Answer = styled.span`\r\n  font-size: 1rem;\r\n  color: #228b22;\r\n  font-weight: 700;\r\n`\r\n\r\nexport const WrongAnswer = styled(Answer)`\r\n  color: #e87662;\r\n`\r\n","import React, { useContext } from \"react\"\r\nimport { observer } from \"mobx-react-lite\"\r\nimport QuizStore from \"../../../store/app-store\"\r\nimport { Answer, WrongAnswer } from \"./score-view-styles\"\r\n\r\nconst ScoreView: React.FC = observer(() => {\r\n  const store = useContext(QuizStore)\r\n  const { userAnswers, questions } = store\r\n\r\n  const checkCorrect = (qId: number, answer: number) => {\r\n    if (questions[qId].correct === answer) {\r\n      return <Answer>Correct</Answer>\r\n    }\r\n    return <WrongAnswer>Wrong</WrongAnswer>\r\n  }\r\n\r\n  const giveAnswers = (answers: number[]) => {\r\n    return answers.map((answer, idx) => {\r\n      return (\r\n        <div key={idx}>\r\n          Question {idx + 1}\r\n          <p>{checkCorrect(idx, answer)}</p>\r\n        </div>\r\n      )\r\n    })\r\n  }\r\n\r\n  const renderUserAnswers = (answers: number[]) => {\r\n    return answers.length > 0 ? giveAnswers(answers) : \"No answers given...\"\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Your answers: </h2>\r\n      {renderUserAnswers(userAnswers)}\r\n      <p>Your score is:</p>\r\n      <h1>{store.userScore}</h1>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default ScoreView\r\n","import React from \"react\"\r\n\r\nimport \"./loader.css\"\r\n\r\nconst Loader: React.FC = () => {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <div className=\"rect1\" />\r\n      <div className=\"rect2\" />\r\n      <div className=\"rect3\" />\r\n      <div className=\"rect4\" />\r\n      <div className=\"rect5\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","import styled from \"styled-components\"\r\n\r\nexport const TimeContainer = styled.div`\r\n  padding: 0.5rem;\r\n  background: #2c3449;\r\n`\r\n\r\nexport const TimeText = styled.p`\r\n  font-size: 1rem;\r\n  color: #fff;\r\n  margin: 0;\r\n\r\n  @media (min-width: 768px) {\r\n    font-size: 1.5rem;\r\n  }\r\n`\r\n\r\nexport const TimeLeft = styled(TimeText)`\r\n  font-weight: 700;\r\n`\r\n","import React, { useContext, useEffect } from \"react\"\r\nimport { observer } from \"mobx-react-lite\"\r\nimport { TimeContainer, TimeText, TimeLeft } from \"./time-indicator-styles\"\r\nimport QuizStore from \"../../../store/app-store\"\r\n\r\nconst TimeIndicator: React.FC = observer(() => {\r\n  const store = useContext(QuizStore)\r\n  const { timer } = store\r\n\r\n  useEffect(() => {\r\n    const id = setInterval(() => {\r\n      store.timerChange()\r\n    }, 1000)\r\n    return () => clearInterval(id)\r\n  }, [timer])\r\n\r\n  const checkTimer = () => {\r\n    if (timer === 0) {\r\n      store.quizStarted = false\r\n    }\r\n    return timer\r\n  }\r\n\r\n  return (\r\n    <TimeContainer>\r\n      <TimeText>Time left</TimeText>\r\n      <TimeLeft>{checkTimer()}</TimeLeft>\r\n    </TimeContainer>\r\n  )\r\n})\r\n\r\nexport default TimeIndicator\r\n","import styled from \"styled-components\"\r\n\r\nexport const QuestionContainer = styled.div`\r\n  padding: 1rem;\r\n  background-color: #639aa5;\r\n  font-size: 1rem;\r\n  color: #fff;\r\n  border: none;\r\n  transition: 0.2s all;\r\n`\r\n\r\nexport const QuestionTitle = styled.h3`\r\n  text-align: center;\r\n  font-weight: 700;\r\n`\r\n\r\nexport const AnswersContainer = styled.div`\r\n  padding: 0.5rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n\r\n  @media screen and(min-width: 768px) {\r\n  }\r\n`\r\n\r\nexport const SingleAnswer = styled.div`\r\n  padding: 0.5rem;\r\n  color: #000;\r\n  font-size: 2rem;\r\n  margin: 0 0.5rem;\r\n  border: 1px solid #ccc;\r\n  width: 100px;\r\n  font-size: 1.25rem;\r\n  text-align: center;\r\n  flex-wrap: wrap;\r\n\r\n  &:hover {\r\n    background-color: #ccaa;\r\n    cursor: pointer;\r\n  }\r\n`\r\n","import styled from \"styled-components\"\r\n\r\nexport const AnswerButton = styled.div<{ longText: boolean }>`\r\n  padding: 0.5rem;\r\n  color: #000;\r\n  margin: 1rem 0.5rem;\r\n  border: 1px solid #ccc;\r\n  width: 200px;\r\n  font-size: ${props => (props.longText ? \"0.75rem\" : \"1.25rem\")};\r\n  text-align: center;\r\n  height: 40px;\r\n  line-height: 40px;\r\n  overflow: hidden;\r\n\r\n  &:hover {\r\n    background-color: #ccaa;\r\n    cursor: pointer;\r\n  }\r\n`\r\n","import React, { useContext } from \"react\"\r\nimport { AnswerButton } from \"./answer-card-styles\"\r\nimport QuizStore from \"../../../../store/app-store\"\r\n\r\ninterface IProps {\r\n  questionId: number\r\n  answer: number | string\r\n  idx: number\r\n}\r\n\r\nconst AnswerCard: React.FC<IProps> = props => {\r\n  const store = useContext(QuizStore)\r\n  const { questionId, idx, answer } = props\r\n\r\n  const handleNextQuestion = (id: number, userAnswer: number) => {\r\n    store.checkCorrect(id, userAnswer)\r\n    store.addUserAnswer(userAnswer)\r\n    store.nextQuestion()\r\n  }\r\n\r\n  const checkAnswerLength = (answer: string | number) => {\r\n    if (typeof answer === \"string\") {\r\n      return answer.length > 10\r\n    }\r\n    return false\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <AnswerButton\r\n        key={idx}\r\n        onClick={() => handleNextQuestion(questionId, idx)}\r\n        longText={checkAnswerLength(answer)}\r\n      >\r\n        {answer}\r\n      </AnswerButton>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AnswerCard\r\n","import React from \"react\"\r\nimport {\r\n  QuestionContainer,\r\n  AnswersContainer,\r\n  QuestionTitle\r\n} from \"./question-view-styles\"\r\nimport AnswerCard from \"../AnswerCard/answer-card\"\r\n\r\ninterface IProps {\r\n  id: number\r\n  country?: string\r\n  answers: number[]\r\n  type: number\r\n}\r\n\r\nconst QuestionView: React.FC<IProps> = props => {\r\n  const { id, country, answers, type } = props\r\n\r\n  const displayQuestionTitle = () => {\r\n    return type === 1\r\n      ? `What's the population of the ${country}`\r\n      : \"Which country has the biggest population?\"\r\n  }\r\n\r\n  return (\r\n    <QuestionContainer>\r\n      <QuestionTitle>{displayQuestionTitle()}</QuestionTitle>\r\n      <AnswersContainer>\r\n        {answers.map((answer, idx) => {\r\n          return (\r\n            <AnswerCard questionId={id} answer={answer} idx={idx} key={idx} />\r\n          )\r\n        })}\r\n      </AnswersContainer>\r\n    </QuestionContainer>\r\n  )\r\n}\r\n\r\nexport default QuestionView\r\n","import React, { useContext } from \"react\"\r\nimport { observer } from \"mobx-react-lite\"\r\nimport ButtonContainer from \"./ButtonContainer/button-container\"\r\nimport QuizStore from \"../../store/app-store\"\r\nimport { MainContent, QuizContainer } from \"./main-styles\"\r\nimport ScoreView from \"./ScoreView/score-view\"\r\nimport \"./main.css\"\r\nimport Loader from \"./Loader/loader\"\r\nimport TimeIndicator from \"./TimeIndicator/time-indicator\"\r\nimport QuestionView from \"./QuestionsCards/QuestionView/question-view\"\r\n\r\ninterface IQuestion {\r\n  id: number\r\n  type: number\r\n  answers: any[]\r\n  correct: number\r\n  country: string\r\n}\r\n\r\nconst Main: React.FC = observer(() => {\r\n  const store = useContext(QuizStore)\r\n  const { questions, currentQuestion, loading, timer } = store\r\n  const maxQuestions = 5\r\n\r\n  const renderLoading = () => {\r\n    return <Loader />\r\n  }\r\n  const renderQuestion = (q: IQuestion) => {\r\n    return (\r\n      <QuestionView\r\n        type={q.type}\r\n        id={q.id}\r\n        country={q.country}\r\n        answers={q.answers}\r\n      />\r\n    )\r\n  }\r\n\r\n  const defineQuestion = (q: IQuestion) => {\r\n    return questions.length ? renderQuestion(q) : null\r\n  }\r\n\r\n  const renderScoreView = () => {\r\n    store.quizStarted = false\r\n    return <ScoreView />\r\n  }\r\n\r\n  return (\r\n    <MainContent>\r\n      <ButtonContainer />\r\n      {store.quizStarted && <TimeIndicator />}\r\n      <QuizContainer>\r\n        {store.currentQuestion < maxQuestions && timer > 0 ? (\r\n          <div>\r\n            {loading && !questions.length\r\n              ? renderLoading()\r\n              : defineQuestion(questions[currentQuestion])}\r\n          </div>\r\n        ) : (\r\n          renderScoreView()\r\n        )}\r\n      </QuizContainer>\r\n    </MainContent>\r\n  )\r\n})\r\n\r\nexport default Main\r\n","import styled from \"styled-components\"\r\n\r\nexport const AppContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  background-color: #ccc;\r\n  min-height: 100vh;\r\n  margin: 0;\r\n  padding: 0;\r\n`\r\n","import React, { useEffect, useContext } from \"react\"\r\nimport Header from \"../Header/header\"\r\nimport Main from \"../Main/main\"\r\nimport { AppContainer } from \"./app-styles\"\r\nimport QuizStore from \"../../store/app-store\"\r\n\r\nconst App: React.FC = () => {\r\n  const store = useContext(QuizStore)\r\n\r\n  useEffect(() => {\r\n    store.fetchCountries()\r\n  }, [])\r\n\r\n  return (\r\n    <AppContainer>\r\n      <Header />\r\n      <Main />\r\n    </AppContainer>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { Provider } from \"mobx-react\"\r\nimport App from \"./components/App/App\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\nimport { QuizStore } from \"./store/app-store\"\r\nimport \"./index.css\"\r\n\r\nconst Root = (\r\n  <Provider quizStore={QuizStore}>\r\n    <App />\r\n  </Provider>\r\n)\r\n\r\nReactDOM.render(Root, document.getElementById(\"root\"))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}